using System;
using TinyJSON;
using UnityEngine;

namespace JesseStiller.TerrainFormerExtension {
	// NOTE: This class is auto-generated by the author of this software "Jesse Stiller"
	internal class BaseSettings {
		private const bool showSculptingGridPlaneDefault = false;
		[Include]
		internal bool showSculptingGridPlane = showSculptingGridPlaneDefault;

		private const bool raycastOntoFlatPlaneDefault = true;
		[Include]
		internal bool raycastOntoFlatPlane = raycastOntoFlatPlaneDefault;

		private const bool showSceneViewInformationDefault = true;
		[Include]
		internal bool showSceneViewInformation = showSceneViewInformationDefault;

		private const bool displaySculptOntoModeDefault = true;
		[Include]
		internal bool displaySculptOntoMode = displaySculptOntoModeDefault;

		private const bool displayCurrentToolDefault = true;
		[Include]
		internal bool displayCurrentTool = displayCurrentToolDefault;

		private const bool displayCurrentHeightDefault = true;
		[Include]
		internal bool displayCurrentHeight = displayCurrentHeightDefault;

		private const bool displayBrushSizeIncrementDefault = true;
		[Include]
		internal bool displayBrushSizeIncrement = displayBrushSizeIncrementDefault;

		private const float brushSizeIncrementMultiplierDefault = 0.005f;
		[Include]
		internal float brushSizeIncrementMultiplier = brushSizeIncrementMultiplierDefault;

		private const int brushPreviewSizeDefault = 48;
		[Include]
		internal int brushPreviewSize = brushPreviewSizeDefault;

		private const int texurePreviewSizeDefault = 64;
		[Include]
		internal int texurePreviewSize = texurePreviewSizeDefault;

		private const bool alwaysShowBrushSelectionDefault = false;
		[Include]
		internal bool alwaysShowBrushSelection = alwaysShowBrushSelectionDefault;
		internal bool AlwaysShowBrushSelection {
			get {
				return alwaysShowBrushSelection;
			}
			set {
				if(value == alwaysShowBrushSelection) return;
				
				alwaysShowBrushSelection = value;
				if(AlwaysShowBrushSelectionChanged != null) AlwaysShowBrushSelectionChanged();
			}
		}
		internal Action AlwaysShowBrushSelectionChanged;

		private const bool alwaysUpdateTerrainLODsDefault = true;
		[Include]
		internal bool alwaysUpdateTerrainLODs = alwaysUpdateTerrainLODsDefault;

		private const bool invertBrushTexturesGloballyDefault = false;
		[Include]
		internal bool invertBrushTexturesGlobally = invertBrushTexturesGloballyDefault;

		private const BrushSelectionDisplayType brushSelectionDisplayTypeDefault = BrushSelectionDisplayType.Tabbed;
		[Include]
		internal BrushSelectionDisplayType brushSelectionDisplayType = brushSelectionDisplayTypeDefault;

		internal virtual bool AreSettingsDefault() {
			return showSculptingGridPlane == showSculptingGridPlaneDefault &&
				raycastOntoFlatPlane == raycastOntoFlatPlaneDefault &&
				showSceneViewInformation == showSceneViewInformationDefault &&
				displaySculptOntoMode == displaySculptOntoModeDefault &&
				displayCurrentTool == displayCurrentToolDefault &&
				displayCurrentHeight == displayCurrentHeightDefault &&
				displayBrushSizeIncrement == displayBrushSizeIncrementDefault &&
				brushSizeIncrementMultiplier == brushSizeIncrementMultiplierDefault &&
				brushPreviewSize == brushPreviewSizeDefault &&
				texurePreviewSize == texurePreviewSizeDefault &&
				alwaysShowBrushSelection == alwaysShowBrushSelectionDefault &&
				alwaysUpdateTerrainLODs == alwaysUpdateTerrainLODsDefault &&
				invertBrushTexturesGlobally == invertBrushTexturesGloballyDefault &&
				brushSelectionDisplayType == brushSelectionDisplayTypeDefault;
		}

		internal virtual void RestoreDefaultSettings() {
			showSculptingGridPlane = showSculptingGridPlaneDefault;
			raycastOntoFlatPlane = raycastOntoFlatPlaneDefault;
			showSceneViewInformation = showSceneViewInformationDefault;
			displaySculptOntoMode = displaySculptOntoModeDefault;
			displayCurrentTool = displayCurrentToolDefault;
			displayCurrentHeight = displayCurrentHeightDefault;
			displayBrushSizeIncrement = displayBrushSizeIncrementDefault;
			brushSizeIncrementMultiplier = brushSizeIncrementMultiplierDefault;
			brushPreviewSize = brushPreviewSizeDefault;
			texurePreviewSize = texurePreviewSizeDefault;
			alwaysShowBrushSelection = alwaysShowBrushSelectionDefault;
			alwaysUpdateTerrainLODs = alwaysUpdateTerrainLODsDefault;
			invertBrushTexturesGlobally = invertBrushTexturesGloballyDefault;
			brushSelectionDisplayType = brushSelectionDisplayTypeDefault;
		}
	}
}